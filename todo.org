* Notes
  - For previewing the images in emacs, and refresh every 10 seconds:
    (setq auto-revert-interval 10)
* Known problems
* cleaning todos
** DONE fix order of radius strategies
   CLOSED: [2020-03-05 tor 15:20]
** DONE rename all setters. current naming is confusing
   CLOSED: [2020-02-13 tor 21:41]
** TODO write description for each sub
* ideas
** DONE A proper rewrite
   CLOSED: [2020-03-05 tor 15:21]
*** Alleles/Genes
   - make an allele one value instead of an array of values
   - allele value can be 0 - 2047
   - make the gene consist of an array of alleles
   - an ALLELE STRING is a series of alleles which describe one geometrical object
   - Allele string:
     - first element in an allele string describes the type/length
       1. circle x,y,R,r,g,b
       2. rectangle x1,y1,x2,y2,r,g,b
       3. triangle x1,y1,x2,y2,x3,y3,r,g,b
     - Use modulo operations to get the numbers to fit.
     - early optimization: create four modulo tables in the beginning, since lookups are cheaper than modulo calculation
*** Remove diversification and scrubbing
    this destroys genetic variation, leading to earlier convergence
*** Support different kinds of mutations
    1. Insert mutation
       Select two alleles at random (a1, a2). Insert a2 after a1, shifting the rest upwards
    2. Inversion mutation
       Select two alleles at random, then invert the alleles values between them (v+1024)
    3. Scramble mutation
       Select subset of alleles, and move them to each others' locations without changing them
    4. Swap mutation
       Select two alleles and swap their locations
    5. Reversing mutation
       Select two alleles at random, then reverse the location order of the alleles between them
    6. Creep mutation
       Select an allele and replace it with a random value
*** Data Structure of populations
    - A currentState is a hash with the following key/values
      - 'generations'   => (optional) scalar with # of iterations
      - 'individuals'   => ref to array of individuals
      - 'target'        => (optional) string, with filename of target image
      - 'best_distance' => scalar with best distance among individuals

    - An individual is a hash, with following key/values
      - 'gene'          => ref to array of alleles
      - 'image'         => (optional) ref to imagemagick image object
      - 'distance'      => (optional) scalar with output from distance function
      - 


** Choice needs to be made. OO is nice but doesn't work as well as I wished. Hacky version works well, but is ugly.
   Have separated them into two parts now. easy to tell the difference.
   Will defer making the decision right now.
** Main.pl
   - Specify project when starting (or get a project name assigned)
     - All output goes to that project.
     - target image saved there automatically
     - when starting up, you just need to spec the project and it should start where it left off.
   - Status update to user can be cleaned
     - Show change-map over the top individuals (survivor, mutant, child)
     - Use colors!

   - Separate program to parse gene files' ctime to create ascii frequency chart
